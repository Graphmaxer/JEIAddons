plugins {
	id "net.minecraftforge.gradle.forge" version "2.0.2"
}

version = version_major + '.' + version_minor + '.' + version_patch
group= "mezz.jeiAddons" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "jeiAddons_" + mcversion

if (System.getenv().BUILD_NUMBER != null) {//adds the build number to the end of the version string if on a build server
	version += ".${System.getenv().BUILD_NUMBER}"
}

// java version
sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
	version = mcversion + "-" + forgeversion
    runDir = "run"

	replace '@VERSION@', project.version

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20141130"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

	useDepAts = true
}

repositories {
	maven {
		url "http://dvs1.progwml6.com/files/maven"
	}
}

dependencies {
	deobfCompile "mezz.jei:jei_${mcversion}:${jeiversion}"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// prevent java 8's strict doclint for javadocs from failing builds
allprojects {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
	classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	classifier = 'sources'
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

task("uploadJars", dependsOn: "build") {
	description = "uploads JARs"
	if (project.hasProperty("local_maven")) {
		apply plugin: 'maven'
		uploadArchives {
			repositories {
				mavenDeployer {
					repository(url: "file://${local_maven}")
				}
			}
		}
	}
}
